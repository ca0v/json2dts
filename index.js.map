{
  "version": 3,
  "sources": ["fun/isDefined.ts", "fun/log.ts", "fun/stringify.ts", "fun/typedef.ts", "fun/deep.ts", "fun/distinct.ts", "fun/reduce.ts", "fun/typing.ts", "fun/full.ts", "index.ts"],
  "sourcesContent": ["export function isDefined(o) {\r\n  return typeof o !== \"undefined\";\r\n}\r\nexport function isPrimitive(o) {\r\n  return typeof o !== \"object\";\r\n}\r\n", "export function log(...args) {\r\n  // console.log(...args);\r\n}\r\n", "export function stringify(o) {\r\n  return JSON.stringify(o).replaceAll(\r\n    `\"`,\r\n    ``\r\n  );\r\n}\r\n", "import { isPrimitive } from \"./isDefined.js\";\r\nimport { log } from \"./log.js\";\r\nimport { stringify } from \"./stringify.js\";\r\n\r\nfunction reduce(o: Array<any>) {\r\n  return [...new Set(o)];\r\n}\r\n\r\nexport function typedef(o: object) {\r\n  log(\"typedef.in\", stringify(o));\r\n  const result = _typedef(o);\r\n  log(\"typedef.out\", stringify(result));\r\n  return result;\r\n}\r\n\r\nfunction _typedef(o: object) {\r\n  if (isPrimitive(o)) return typeof o;\r\n  if (Array.isArray(o))\r\n    return reduce(o.map(typedef));\r\n  const result = Object.entries(o).map(\r\n    ([key, value]) => [\r\n      key,\r\n      [typedef(value)],\r\n    ]\r\n  );\r\n  return Object.fromEntries(result);\r\n}\r\n", "import {\r\n  isPrimitive,\r\n  isDefined,\r\n} from \"./isDefined\";\r\nimport { log } from \"./log.js\";\r\nimport { stringify } from \"./stringify.js\";\r\n\r\nexport function deep(o1, o2) {\r\n  log(\r\n    \"deep.in\",\r\n    stringify(o1),\r\n    stringify(o2)\r\n  );\r\n  const result = _deep(o1, o2);\r\n  log(\"deep.out\", stringify(result));\r\n  return result;\r\n}\r\n\r\nexport function _deep(o1, o2) {\r\n  if (o1 === o2) return o1;\r\n  if (isPrimitive(o1)) {\r\n    if (Array.isArray(o2)) {\r\n      return [o1, ...o2];\r\n    } else {\r\n      return [o1, o2];\r\n    }\r\n  } else if (Array.isArray(o1)) {\r\n    if (Array.isArray(o2)) {\r\n      return [...o1, ...o2];\r\n    } else {\r\n      return [...o1, o2];\r\n    }\r\n  } else {\r\n    if (isPrimitive(o2)) {\r\n      return [o1, o2];\r\n    } else if (Array.isArray(o2)) {\r\n      return [o1, ...o2];\r\n    } else {\r\n      const result = { ...o1 };\r\n      Object.entries(o2).forEach(\r\n        ([key, value]) => {\r\n          if (!isDefined(result[key])) {\r\n            result[key] = value;\r\n          } else {\r\n            result[key] = _deep(\r\n              result[key],\r\n              value\r\n            );\r\n          }\r\n        }\r\n      );\r\n      return result;\r\n    }\r\n  }\r\n}\r\n", "import { isPrimitive } from \"./isDefined.js\";\r\nimport { log } from \"./log.js\";\r\nimport { stringify } from \"./stringify.js\";\r\n\r\nexport function distinct(\r\n  items: Array<any>\r\n) {\r\n  log(\"distinct.in\", stringify(items));\r\n  const result = _distinct(items);\r\n  log(\r\n    \"distinct.out\",\r\n    stringify(result)\r\n  );\r\n  return result;\r\n}\r\n\r\nexport function _distinct(\r\n  items: Array<any>\r\n) {\r\n  const unique = new Set(items);\r\n  let result = [...unique];\r\n  const primitives = result\r\n    .filter(isPrimitive)\r\n    .sort();\r\n  const objects = result.filter(\r\n    (o) => !isPrimitive(o)\r\n  );\r\n  if (objects.length) {\r\n    const hash = new Set();\r\n    const uniqueObjects =\r\n      objects.filter((o) => {\r\n        const key = Object.entries(o)\r\n          .map(\r\n            ([k, v]) =>\r\n              `${k}${\r\n                typeof v === \"string\"\r\n                  ? \":\" + v\r\n                  : \"\"\r\n              }`\r\n          )\r\n          .join(\".\");\r\n        if (hash.has(key)) return false;\r\n        hash.add(key);\r\n        return true;\r\n      });\r\n    result = [\r\n      ...primitives,\r\n      ...uniqueObjects,\r\n    ];\r\n  }\r\n  return result;\r\n}\r\n", "import { deep } from \"./deep.js\";\r\nimport { distinct } from \"./distinct.js\";\r\nimport { isPrimitive } from \"./isDefined.js\";\r\nimport { log } from \"./log.js\";\r\nimport { stringify } from \"./stringify.js\";\r\n\r\nexport function reduce(o: object) {\r\n  log(\"reduce.in\", stringify(o));\r\n  const result = _reduce(o);\r\n  log(\"reduce.out\", stringify(result));\r\n  return result;\r\n}\r\n\r\nfunction _reduce(o: object) {\r\n  if (isPrimitive(o)) return o;\r\n  if (Array.isArray(o)) {\r\n    const items =\r\n      distinct(o).map(reduce);\r\n    // get all unique primitives\r\n    const primitives = items\r\n      .filter(isPrimitive)\r\n      .sort();\r\n    // reduce all objects and arrays\r\n    const complex = items\r\n      .filter((o) => !isPrimitive(o))\r\n      .map(reduce);\r\n    // combine them into a single composite type\r\n    const nonArrayTypes =\r\n      complex.filter(\r\n        (o) => !Array.isArray(o)\r\n      );\r\n    let [head, ...tail] = nonArrayTypes;\r\n    tail.forEach(\r\n      (t) => (head = deep(head, t))\r\n    );\r\n    const arrayTypes = complex.filter(\r\n      Array.isArray\r\n    );\r\n    return []\r\n      .concat(primitives)\r\n      .concat(arrayTypes)\r\n      .concat(head ? [head] : []);\r\n    // combine the object composite with prims for a final\r\n  }\r\n  const result = Object.entries(o).map(\r\n    ([key, value]) => [\r\n      key,\r\n      reduce(value),\r\n    ]\r\n  );\r\n  return Object.fromEntries(result);\r\n}\r\n", "import { isPrimitive } from \"./isDefined.js\";\r\nimport { log } from \"./log.js\";\r\nimport { stringify } from \"./stringify.js\";\r\n\r\nexport function typing(o) {\r\n  log(\"typing.in\", stringify(o));\r\n  const result = _typing(o);\r\n  log(\"typing.out\", stringify(result));\r\n  return result;\r\n}\r\n\r\nfunction _typing(o) {\r\n  if (isPrimitive(o)) return o;\r\n  if (Array.isArray(o)) {\r\n    if (\r\n      o.length === 1 &&\r\n      Array.isArray(o[0])\r\n    ) {\r\n      // this is an array\r\n      return `Array<${_typing(o[0])}>`;\r\n    } else {\r\n      // these are types\r\n      return o\r\n        .map(typing)\r\n        .map(stringify)\r\n        .join(\"|\");\r\n    }\r\n  }\r\n  const result = Object.fromEntries(\r\n    Object.entries(o).map(\r\n      ([key, value]) => [\r\n        key,\r\n        typing(value),\r\n      ]\r\n    )\r\n  );\r\n  return stringify(result);\r\n}\r\n", "import { typedef } from \"./typedef.js\";\r\nimport { reduce } from \"./reduce.js\";\r\nimport { typing } from \"./typing.js\";\r\n\r\nexport function full(o) {\r\n  return typing(reduce(typedef(o)));\r\n}\r\n", "import { full } from \"./fun/full.js\";\r\n\r\nconst myFull = (o) =>\r\n  `interface I ${full(o)};`;\r\n\r\n// Write Javascript code!\r\nconst inputValue =\r\n  document.getElementById(\r\n    \"input_json\"\r\n  ) as HTMLInputElement;\r\n\r\nconst outputValue =\r\n  document.getElementById(\r\n    \"output_json\"\r\n  ) as HTMLInputElement;\r\n\r\nconst [log, nextButton] = [\r\n  \"log\",\r\n  \"next\",\r\n].map((k) =>\r\n  document.getElementById(k)\r\n);\r\noutputValue.innerHTML = `<h1>JS Starter</h1>`;\r\n\r\nconst samples = [\r\n  { a: [{ b: [1] }] },\r\n  {\r\n    a: [\r\n      { a: 1 },\r\n      { a: !1 },\r\n      { b: \"\" },\r\n      { b: 0, a: new Date() },\r\n    ],\r\n  },\r\n  {\r\n    array1: [0],\r\n    array2: [\"\", !0],\r\n    array3: [\"\", !0, 0],\r\n    array4: [\"\", !0, new Date()],\r\n    array5: [\"\", !0, 0, new Date()],\r\n    items: [\r\n      0,\r\n      { a: 1, d: !0 },\r\n      { b: 1 },\r\n      { a: 2 },\r\n      { b: \"\", c: new Date() },\r\n      \"\",\r\n    ],\r\n  },\r\n  {\r\n    s: \"string\",\r\n    n: 1,\r\n    e: {},\r\n    d: new Date(),\r\n    a: [1, \"2\"],\r\n    o: {\r\n      a: [\"\"],\r\n      n: [0, 1],\r\n      d: [new Date(), 10],\r\n    },\r\n    ca: [\r\n      { a: 1 },\r\n      { b: 2 },\r\n      { a: 1, b: 1 },\r\n    ],\r\n    cx: {\r\n      a: 1,\r\n      b: [1],\r\n      c: {\r\n        a: 1,\r\n        b: [1, 2, 3, \"\", 4, 5, 7],\r\n      },\r\n      d: {\r\n        a: 1,\r\n        b: [1, \"b\", 2, new Date(), {}],\r\n      },\r\n      e: { a: 1, b: [1] },\r\n    },\r\n  },\r\n];\r\n\r\nfunction render() {\r\n  try {\r\n    let o;\r\n    // JSON.parse expects quoted key names\r\n    [eval][0](\r\n      `o = ${inputValue.value}`\r\n    );\r\n    outputValue.value = `${myFull(o)}`;\r\n  } catch (ex) {\r\n    log.innerText = ex;\r\n  }\r\n}\r\n\r\ninputValue.onkeyup = () => render();\r\n\r\nlet sampleIndex = -1;\r\nnextButton.onclick = () => {\r\n  sampleIndex =\r\n    (1 + sampleIndex) % samples.length;\r\n  inputValue.value = JSON.stringify(\r\n    samples[sampleIndex],\r\n    null,\r\n    \"  \"\r\n  );\r\n  render();\r\n};\r\n\r\nnextButton.click();\r\n"],
  "mappings": "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",
  "names": []
}
